#!/bin/bash

#Script to control getting sea ice concentrations converted to lat-long
#  grids and filtered appropriately.
#First version 12/98.
#Revised 15 September 1999
#Robert Grumbine
#Backfill of recomputed 1995-1997 global files
#Land mask usage cleaned up.
#RG 14 June 2001

#CDIR    contains the land masks global, nland, sland
#EXDIR   contains executables filt3, fill, time_interp
#OUTDIR  is destination for output
#PROCDIR is directory with sst and sea ice grib files

CDIR=/home/wd21rg/programming/fix/
EXDIR=/home/seaice/rayner.execs.old/
OUTDIR=/data/forecasts/reproc
PROCDIR=/home/wd21rg/programming/allice/development/

tag=950915
tagm=950914
enddate=971031
start=$tag
export CDIR EXDIR OUTDIR PROCDIR tag tagm enddate start

SSTFILT=275.15

#Should be no changes below here ---------------

#Check for required directories.
if [ ! -d $EXDIR ] ; then
  echo cannot find executables directory $EXDIR   Aborting.
  #Ensure that the executables are available:
  cd $EXDIR
  make
  make
  exit 1
fi
if [ ! -d $CDIR ] ; then
  echo cannot find reference files directory $CDIR  Aborting
  exit 2
fi
if [ ! -d $PROCDIR ] ; then
  echo cannot find $PROCDIR which is to contain the ice and sst data
  exit 3
fi
if [ ! -d $OUTDIR ] ; then
  mkdir -p $OUTDIR
  if [ ! -d $OUTDIR ] ; then
    echo Failed to construct $OUTDIR for output, aborting
    exit 4
  fi
fi

cd $PROCDIR
#See if we have files to initialize with
if [ ! -f $OUTDIR/fill.$tagm -o ! -f $OUTDIR/age.$tagm ] ; then
  echo Do not have age and fill files for the first 'yesterday'
  exit -1
fi

#Set up the sst indices:
#for y in 5 6 7 8 9 
for y in 5 6 7 
do
  if [ ! -s sst.199$y ] ; then
    echo Do not have sst.199$y available, quitting
    exit
  fi
  if [ ! -s sst.index.199$y ] ; then
    wgrib sst.199$y > sst.index.199$y
  fi
done
#if [ ! -s sst.index.2000 ] ; then
#  wgrib sst.2000 > sst.index.2000
#fi
#if [ ! -s sst.index.2001 ] ; then
#  wgrib sst.2001 > sst.index.2001
#fi


set -x
#First pass
#From 'now' to enddate, construct as much of the data suite as possible
#Since this stage does not (cannot) interpolate across missing days,
#  need a second pass. 
while [ $tag -le $enddate ]
do
  base=`echo $tag | cut -c1-4`
  yy=`echo $tag | cut -c1-2`


#Get ice concentrations for given dates if they dont already exist
# as nonzero size files -- do only if we haven't already constructed
# a latlon file.
  if [ ! -s $OUTDIR/latlon.$tag ] ; then
    if [ ! -s $PROCDIR/rev/n.$tag ] ; then
      echo failed on north $tag >> bad.dates
    fi
    ./northtofloat $PROCDIR/rev/n.$tag n.$tag
    if [ ! -s $PROCDIR/rev/n.$tag ] ; then
      echo failed on south $tag >> bad.dates
    fi
    ./southtofloat $PROCDIR/rev/s.$tag s.$tag
  # Get the sst's to filter with.
    if [ $yy -lt 50 ]; then
       grep $tag sst.index.20$yy | wgrib -i sst.20$yy -o sst.tmp -nh
     else 
       grep $tag sst.index.19$yy | wgrib -i sst.19$yy -o sst.tmp -nh
    fi
    if [ -s sst.tmp ] ; then
      mv sst.tmp sst
    fi
  fi #end of prepping files to construct a latlon with

# Now set about filtering the data, if there isn't already a latlon file,
#   make one
  if [ ! -s $OUTDIR/latlon.$tag ] ; then
    if [ ! -s n.$tag -o ! -s s.$tag ] ; then
      echo cannot produce latlon for $tag >> bad.dates
     else
      $EXDIR/filt3 sst n.$tag s.$tag $OUTDIR/latlon.$tag $OUTDIR/nps.$tag $OUTDIR/sps.$tag $CDIR/global $SSTFILT $CDIR/nland $CDIR/sland
      rm [ns].$tag $OUTDIR/[ns]ps.$tag
    fi
  fi

#And then fill in the grids if the previous day is nonzero size
  if [ -s $OUTDIR/age.$tagm -a -s $OUTDIR/fill.$tagm ] ; then
    echo Filling $tag
    $EXDIR/fill $OUTDIR/fill.$tagm $OUTDIR/latlon.$tag $OUTDIR/age.$tagm $OUTDIR/age.$tag $OUTDIR/fill.$tag
  fi
    
  tagm=$tag
  tag=`expr $tag + 1`
  tag=`dtgfix3 $tag`
  yy=`echo $tag | cut -c1-2`

done     
#This ends phase 1.  All latlon files are generated for which there is
#  data on the corresponding polar stereographic grid.  Once a day was 
#  reached, however, for which there was no ps grid, the filled files
#  could not be constructed.  Hence need phase 2.



#Phase 2: Loop through period and see if there are missing latlon or fill
#  files.  If latlon is missing, interpolate.  If fill is missing, see if
#  we now have a latlon and proceed.  If still no latlon, complain loudly
#  and quit.
tag=$start
tagm=`expr $tag - 1`
tagm=`dtgfix3 $tagm`
while [ $tag -le $enddate ] 
do

  #Construct latlon files if needed:
  k=0
  tmp=$tag
  if [ ! -s $OUTDIR/latlon.$tmp ] ; then
    while [ ! -s $OUTDIR/latlon.$tmp ] 
    do 
      k=`expr $k + 1`
      tmp=`expr $tmp + 1`
      tmp=`dtgfix3 $tmp`
    done
  $EXDIR/time_interp $OUTDIR/latlon.$tagm $OUTDIR/latlon.$tmp $k
    j=0
    tmp=$tag
    while [ $j -lt $k ]
    do
      mv out.0$j $OUTDIR/latlon.$tmp
      j=`expr $j + 1`
      tmp=`expr $tmp + 1`
      tmp=`dtgfix3 $tmp`
    done
  fi
      

  #And then fill in the grids if the previous day is nonzero size
  if [ -s $OUTDIR/age.$tagm -a -s $OUTDIR/fill.$tagm -a \
      \( ! -s $OUTDIR/age.$tag -a ! -s $OUTDIR/fill.$tag \) ] ; then
    echo Filling $tag
    $EXDIR/fill $OUTDIR/fill.$tagm $OUTDIR/latlon.$tag $OUTDIR/age.$tagm $OUTDIR/age.$tag $OUTDIR/fill.$tag
  fi
    
  tagm=$tag
  tag=`expr $tag + 1`
  tag=`dtgfix3 $tag`

done
