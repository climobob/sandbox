C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:  SPHERT     SPHERICAL TRANSFORM
C   PRGMMR: KANAMITSU     ORG: W/NMC23       DATE: 92-04-16
C
C ABSTRACT: TRANSFORMS A FIELD BETWEEN GRID AND SPECTRAL DOMAINS.
C   THIS VERSATILE ROUTINE WILL:
C     ...TRANSFORM GRID TO SPECTRAL OR TRANSFORM SPECTRAL TO GRID;
C     ...PASS A GAUSSIAN GRID OR AN EQUALLY-SPACE GRID;
C     ...PASS A TRIANGULAR TRUNCATION OR A RHOMBOIDAL TRUNCATION;
C     ...OPTIONALLY TRANSFORM WITH DERIVATIVES OF LEGENDRE FUNCTIONS;
C     ...OPTIONALLY TRANSFORM FROM GRID DIVIDING BY COSLAT**2;
C     ...OPTIONALLY MULTIPLY SPECTRAL FIELD BY COMPLEX FACTORS.
C
C PROGRAM HISTORY LOG:
C   92-04-16  IREDELL
C
C USAGE:    CALL SPHERT(IDIR,GRID,WAVE,MLT,FAC,IMAX,JMAX,MAXWV,IROMB)
C
C   INPUT ARGUMENT LIST:
C     IDIR     - MUST BE ONE OF 1,2,3,4,101,102,103,104,-1,-2,-101,-102,
C                IDIR > 0 TO TRANSFORM GRID TO WAVE,
C                IDIR < 0 TO TRANSFORM WAVE TO GRID,
C                ABS(IDIR) < 100 FOR GAUSSIAN GRID,
C                ABS(IDIR) > 100 FOR EQUALLY-SPACED GRID,
C                IDIR IS ODD FOR NORMAL TRANSFORM,
C                IDIR IS EVEN FOR LEGENDRE DERIVATIVE TRANSFORM,
C                IDIR LAST DIGIT > 2 TO TRANSFORM WITH COSINE LATITUDE.
C     GRID     - IF IDIR > 0, REAL (IMAX,JMAX) FIELD TO TRANSFORM.
C                GRID STARTS AT NORTH POLE AND GREENWICH MERIDIAN.
C     WAVE     - IF IDIR < 0, COMPLEX (KMAX) FIELD TO TRANSFORM,
C                WHERE KMAX=(MAXWV+1)*(IROMB+1)*MAXWV+2)/2.
C                WAVE STARTS AT THE GLOBAL MEAN COMPONENT AND THEN
C                CONTAINS THE ZONALLY SYMMETRIC COMPONENTS.
C     MLT      - MULTIPLICATION OPTION ON WAVE VALUES.
C                MLT = 0 FOR NO MULTIPLICATION,
C                MLT = 1 TO MULTIPLY WAVE BY FAC
C                MLT = -1 TO MULTIPLY WAVE BY SQRT(-1)*FAC
C     FAC      - IF MLT.NE.0, REAL (KMAX) FIELD TO MULTIPLY WAVE.
C     IMAX     - LONGITUDINAL DIMENSION OF THE GRID
C     JMAX     - LATITUDINAL DIMENSION OF THE GRID
C     MAXWV    - SPECTRAL TRUNCATION OF THE WAVE
C     IROMB    - IROMB = 0 FOR TRIANGULAR TRUNCATION
C                IROMB = 1 FOR RHOMBOIDAL TRUNCATION
C
C   OUTPUT ARGUMENT LIST:
C     GRID     - IF IDIR < 0, REAL (IMAX,JMAX) FIELD OUTPUT.
C                GRID STARTS AT NORTH POLE AND GREENWICH MERIDIAN.
C     WAVE     - IF IDIR > 0, COMPLEX (KMAX) FIELD OUTPUT,
C                WHERE KMAX=(MAXWV+1)*(IROMB+1)*MAXWV+2)/2.
C                WAVE STARTS AT THE GLOBAL MEAN COMPONENT AND THEN
C                CONTAINS THE ZONALLY SYMMETRIC COMPONENTS.
C
C   SUBPROGRAMS CALLED:
C     UNIQUE:
C     GAUSSLAT   - COMPUTE GAUSSIAN LATITUDES
C     EQUALLAT   - COMPUTE EQUALLY-SPACED LATITUDES
C     (LEGENDRE) - COMPUTE LEGENDRE POLYNOMIALS
C     FFTFAX     - FFT (LIBRARY CALL CAN BE SUBSTITUTED)
C     RFFTMLT    - FFT (LIBRARY CALL CAN BE SUBSTITUTED)
C
C   REMARKS: FORTRAN 9X EXTENSIONS ARE USED.
C     FPP CAN BE USED TO INLINE SUBPROGRAMS.
C     TRANSFORMING WITH AN EQUALLY-SPACED GRID IS IRREVERSIBLE.
C
C ATTRIBUTES:
C   CRAY YMP.
C
C$$$
CFPP$ EXPAND(LEGENDRE)
      SUBROUTINE SPHERT(IDIR,GRID,WAVE,MLT,FAC,IMAX,JMAX,MAXWV,IROMB)
      REAL GRID(IMAX,JMAX)
      COMPLEX WAVE((MAXWV+1)*((IROMB+1)*MAXWV+2)/2)
      REAL FAC((MAXWV+1)*((IROMB+1)*MAXWV+2)/2)
      REAL GG(2*(1+(IMAX+1)/2),JMAX)
      COMPLEX WW((MAXWV+1)*((IROMB+1)*MAXWV+2)/2),W2(-1:1),WS
      REAL TRIGS(2*IMAX),IFAX(20)
      REAL COSCLT(JMAX),WGTCLT(JMAX)
      REAL WRKFFT(2*IMAX*JMAX)
      INTEGER IS((MAXWV+1)*((IROMB+1)*MAXWV+2)/2)
      REAL PNM((MAXWV+1)*((IROMB+1)*MAXWV+2)/2)
      REAL EX(0:MAXWV+1),PX(-1:MAXWV+1)
      KMAX=(MAXWV+1)*((IROMB+1)*MAXWV+2)/2
      IPD=1-MOD(ABS(IDIR),2)
      ISD=1-2*IPD
      ICD=(MOD(ABS(IDIR),10)-1)/2
      JUMP=2*(1+(IMAX+1)/2)
      MAXWVM=MIN(MAXWV,(IMAX+1)/2)
      CALL FFTFAX(IMAX,IFAX,TRIGS)
      IF(ABS(IDIR).LT.100) THEN
        CALL GAUSSLAT(JMAX,COSCLT,WGTCLT)
      ELSE
        CALL EQUALLAT(JMAX,COSCLT,WGTCLT)
      ENDIF
      K=0
      DO M=0,MAXWVM
        DO N=M,IROMB*M+MAXWV
          K=K+1
          IS(K)=ISD*(1-2*MOD(N-M,2))
        ENDDO
      ENDDO

      IF(IDIR.GT.0) THEN

        DO J=1,JMAX
          DO I=1,IMAX
            GG(I,J)=GRID(I,J)
          ENDDO
        ENDDO
        CALL RFFTMLT(GG,WRKFFT,TRIGS,IFAX,1,JUMP,IMAX,JMAX,-1)
        DO K=1,KMAX
          WAVE(K)=0.
        ENDDO
        DO J=1,(JMAX+1)/2
          JR=JMAX+1-J
          CALL LEGENDRE(IPD,COSCLT(J),MAXWV,IROMB,EX,PX,PNM)
          WJ=WGTCLT(J)
          IF(ICD.NE.0.AND.COSCLT(J).LT.1.) WJ=WJ/(1.-COSCLT(J)**2)
          K=0
          DO M=0,MAXWVM
            W2(1)=WJ*CMPLX(GG(2*M+1,J)+GG(2*M+1,JR),
     &                     GG(2*M+2,J)+GG(2*M+2,JR))
            W2(-1)=WJ*CMPLX(GG(2*M+1,J)-GG(2*M+1,JR),
     &                      GG(2*M+2,J)-GG(2*M+2,JR))
            DO N=M,IROMB*M+MAXWV
              K=K+1
              WAVE(K)=WAVE(K)+W2(IS(K))*PNM(K)
            ENDDO
          ENDDO
        ENDDO
        IF(MLT.NE.0) THEN
          WS=CMPLX(1.,0.)
          IF(MLT.LT.0) WS=CMPLX(0.,1.)
          DO K=1,KMAX
            WAVE(K)=WAVE(K)*WS*FAC(K)
          ENDDO
        ENDIF

      ELSE

        IF(MLT.NE.0) THEN
          WS=CMPLX(1.,0.)
          IF(MLT.LT.0) WS=CMPLX(0.,1.)
          DO K=1,KMAX
            WW(K)=WAVE(K)*WS*FAC(K)
          ENDDO
        ELSE
          DO K=1,KMAX
            WW(K)=WAVE(K)
          ENDDO
        ENDIF
        DO J=1,(JMAX+1)/2
          CALL LEGENDRE(IPD,COSCLT(J),MAXWV,IROMB,EX,PX,PNM)
          K=0
          DO M=0,MAXWVM
            W2(1)=0.
            W2(-1)=0.
            DO N=M,IROMB*M+MAXWV
              K=K+1
              W2(1)=W2(1)+WW(K)*PNM(K)
              W2(-1)=W2(-1)+WW(K)*PNM(K)*IS(K)
            ENDDO
            GG(2*M+1,JMAX+1-J)=REAL(W2(-1))
            GG(2*M+2,JMAX+1-J)=AIMAG(W2(-1))
            GG(2*M+1,J)=REAL(W2(1))
            GG(2*M+2,J)=AIMAG(W2(1))
          ENDDO
        ENDDO
        DO I=2*MAXWVM+3,JUMP
          DO J=1,JMAX
            GG(I,J)=0.
          ENDDO
        ENDDO
        CALL RFFTMLT(GG,WRKFFT,TRIGS,IFAX,1,JUMP,IMAX,JMAX, 1)
        DO J=1,JMAX
          DO I=1,IMAX
            GRID(I,J)=GG(I,J)
          ENDDO
        ENDDO

      ENDIF

      RETURN
      END
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:  GAUSSLAT   COMPUTE GAUSSIAN LATITUDES
C   PRGMMR: IREDELL       ORG: W/NMC23       DATE: 92-04-16
C
C ABSTRACT: COMPUTES COSINES OF COLATITUDE AND GAUSSIAN WEIGHTS
C   ON THE GAUSSIAN LATITUDES.  THE K GAUSSIAN LATITUDES ARE AT
C   THE ZEROES OF THE LEGENDRE POLYNOMIAL OF ORDER K.
C
C PROGRAM HISTORY LOG:
C   92-04-16  IREDELL
C
C USAGE:    CALL GAUSSLAT(K,A,W)
C
C   INPUT ARGUMENT LIST:
C     K        - NUMBER OF LATITUDES.
C
C   OUTPUT ARGUMENT LIST:
C     A        - REAL (K) COSINES OF COLATITUDE.
C     W        - REAL (K) GAUSSIAN WEIGHTS.
C
C   REMARKS: FORTRAN 9X EXTENSIONS ARE USED.
C
C ATTRIBUTES:
C   CRAY YMP.
C
C$$$
      SUBROUTINE GAUSSLAT(K,A,W)
      DIMENSION A(K),W(K)
      PARAMETER(PI=3.14159265358979,C=(1.-(2./PI)**2)*0.25)
      PARAMETER(EPS=1.E-14)
      DIMENSION PK(K/2),PKM1(K/2),PKM2(K/2)
      PARAMETER(KZ=50)
      DIMENSION BZ(KZ)
      DATA BZ        / 2.4048255577,  5.5200781103,
     $  8.6537279129, 11.7915344391, 14.9309177086, 18.0710639679,
     $ 21.2116366299, 24.3524715308, 27.4934791320, 30.6346064684,
     $ 33.7758202136, 36.9170983537, 40.0584257646, 43.1997917132,
     $ 46.3411883717, 49.4826098974, 52.6240518411, 55.7655107550,
     $ 58.9069839261, 62.0484691902, 65.1899648002, 68.3314693299,
     $ 71.4729816036, 74.6145006437, 77.7560256304, 80.8975558711,
     $ 84.0390907769, 87.1806298436, 90.3221726372, 93.4637187819,
     $ 96.6052679510, 99.7468198587, 102.888374254, 106.029930916,
     $ 109.171489649, 112.313050280, 115.454612653, 118.596176630,
     $ 121.737742088, 124.879308913, 128.020877005, 131.162446275,
     $ 134.304016638, 137.445588020, 140.587160352, 143.728733573,
     $ 146.870307625, 150.011882457, 153.153458019, 156.295034268 /
      KH=K/2
      R=1./SQRT((K+0.5)**2+C)
      DO J=1,MIN(KH,KZ)
        A(J)=COS(BZ(J)*R)
      ENDDO
      DO J=KZ+1,KH
        A(J)=COS((BZ(KZ)+(J-KZ)*PI)*R)
      ENDDO
      SPMAX=1.
      DO WHILE(SPMAX.GT.EPS)
        SPMAX=0.
        DO J=1,KH
          PKM1(J)=1.
          PK(J)=A(J)
        ENDDO
        DO N=2,K
          DO J=1,KH
            PKM2(J)=PKM1(J)
            PKM1(J)=PK(J)
            PK(J)=((2*N-1)*A(J)*PKM1(J)-(N-1)*PKM2(J))/N
          ENDDO
        ENDDO
        DO J=1,KH
          SP=PK(J)*(1.-A(J)**2)/(K*(PKM1(J)-A(J)*PK(J)))
          A(J)=A(J)-SP
          SPMAX=MAX(SPMAX,ABS(SP))
        ENDDO
      ENDDO
CDIR$ IVDEP
      DO J=1,KH
        W(J)=(2.*(1.-A(J)**2))/(K*PKM1(J))**2
        A(K+1-J)=-A(J)
        W(K+1-J)=W(J)
      ENDDO
      IF(K.NE.KH*2) THEN
        J=KH+1
        A(J)=0.
        W(J)=1./K**2
        DO N=2,K,2
          W(J)=W(J)*N**2/(N-1)**2
        ENDDO
      ENDIF
      RETURN
      END
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:  EQUALLAT   COMPUTE EQUALLY-SPACED LATITUDES
C   PRGMMR: IREDELL       ORG: W/NMC23       DATE: 92-04-16
C
C ABSTRACT: COMPUTES COSINES OF COLATITUDE AND GAUSSIAN WEIGHTS
C           ON EQUALLY-SPACED LATITUDES (INCLUDING POLES).
C           THE WEIGHTS ARE COMPUTED BASED ON ELLSAESSER (JAM,1966).
C
C PROGRAM HISTORY LOG:
C   92-04-16  IREDELL
C   93-12-28  IREDELL  MODIFIED WEIGHTS BASED ON ELLSAESSER
C
C USAGE:    CALL EQUALLAT(K,A,W)
C
C   INPUT ARGUMENT LIST:
C     K        - NUMBER OF LATITUDES.
C
C   OUTPUT ARGUMENT LIST:
C     A        - REAL (K) COSINES OF COLATITUDE.
C     W        - REAL (K) GAUSSIAN WEIGHTS.
C
C SUBPROGRAMS CALLED:
C   MINV         SOLVES FULL MATRIX PROBLEM
C
C REMARKS: FORTRAN 9X EXTENSIONS ARE USED.
C
C ATTRIBUTES:
C   CRAY YMP.
C
C$$$
      SUBROUTINE EQUALLAT(K,A,W)
      DIMENSION A(K),W(K)
      DIMENSION AWORK((K+1)/2-1,(K+1)/2),BWORK(((K+1)/2-1)*2)
      PARAMETER(PI=3.14159265358979)
      KH=K/2
      KHE=(K+1)/2
      DLT=PI/(K-1)
      A(1)=1.
      DO J=2,KH
        A(J)=COS((J-1)*DLT)
      ENDDO
      IF(KHE.GT.KH) A(KHE)=0.
      DO JS=1,KHE-1
        DO J=2,KHE
          AWORK(JS,J-1)=COS(2*(JS-1)*(J-1)*DLT)
        ENDDO
      ENDDO
      DO JS=1,KHE-1
        AWORK(JS,KHE)=-1./(4*(JS-1)**2-1)
      ENDDO
      CALL MINV(AWORK,KHE-1,KHE-1,BWORK,DA,1.E-12,1,0)
      W(1)=0.
      DO J=2,KHE
        W(J)=AWORK(J-1,KHE)
      ENDDO
CDIR$ IVDEP
      DO J=1,KH
        A(K+1-J)=-A(J)
        W(K+1-J)=W(J)
      ENDDO
      RETURN
      END
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:  LEGENDRE   COMPUTE LEGENDRE POLYNOMIALS.
C   PRGMMR: IREDELL       ORG: W/NMC23       DATE: 92-04-16
C
C ABSTRACT: EVALUATES THE NORMALIZED ASSOCIATED LEGENDRE POLYNOMIALS
C   AT A GIVEN COSINE OF COLATITUDE.
C
C PROGRAM HISTORY LOG:
C   92-04-16  IREDELL
C
C USAGE:    CALL LEGENDRE(IPD,COSCLT,MAXWV,IROMB,EX,PX,PNM)
C
C   INPUT ARGUMENT LIST:
C     IPD      - IPD = 0 TO EVALUATE POLYNOMIAL ITSELF,
C                IPD = 1 TO EVALUATE POLYNOMIAL DERIVATIVE.
C     COSCLT   - COSINE OF COLATITUDE AT WHICH TO EVALUTATE.
C     MAXWV    - SPECTRAL TRUNCATION
C     IROMB    - IROMB = 0 FOR TRIANGULAR TRUNCATION
C                IROMB = 1 FOR RHOMBOIDAL TRUNCATION
C
C   WORK ARGUMENT LIST:
C     EX       - REAL (MAXWV+2) WORK AREA
C     PX       - REAL (MAXWV+3) WORK AREA
C
C   OUTPUT ARGUMENT LIST:
C     PNM      - REAL (KMAX) POLYNOMIAL VALUES,
C                WHERE KMAX=(MAXWV+1)*(IROMB+1)*MAXWV+2)/2.
C
C   REMARKS: FORTRAN 9X EXTENSIONS ARE USED.
C
C ATTRIBUTES:
C   CRAY YMP.
C
C$$$
      SUBROUTINE LEGENDRE(IPD,COSCLT,MAXWV,IROMB,EX,PX,PNM)
      DIMENSION PNM((MAXWV+1)*((IROMB+1)*MAXWV+2)/2)
      DIMENSION EX(0:MAXWV+1),PX(-1:MAXWV+1)
      SINCLT=SQRT(1.-COSCLT**2)
      K=0
      EX(0)=0.
      PX(-1)=0.
      PX(0)=SQRT(0.5)
      DO M=0,MAXWV
        IF(M.GT.0) PX(0)=PX(0)*SINCLT/(EX(1)*SQRT(FLOAT(2*M)))
        DO N=M+1,MAXWV+IROMB*M+1
          EX(N-M)=SQRT(FLOAT(N**2-M**2)/FLOAT(4*N**2-1))
        ENDDO
CDIR$ NEXTSCALAR
        DO N=M+1,MAXWV+IROMB*M+1
          PX(N-M)=(COSCLT*PX(N-M-1)-EX(N-M-1)*PX(N-M-2))/EX(N-M)
        ENDDO
        IF(IPD.EQ.0) THEN
          DO N=M,MAXWV+IROMB*M
            K=K+1
            PNM(K)=PX(N-M)
          ENDDO
        ELSE
          DO N=M,MAXWV+IROMB*M
            K=K+1
            PNM(K)=N*EX(N-M+1)*PX(N-M+1)-(N+1)*EX(N-M)*PX(N-M-1)
          ENDDO
        ENDIF
      ENDDO
      RETURN
      END
