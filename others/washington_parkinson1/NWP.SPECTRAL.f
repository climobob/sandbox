      PROGRAM BVE
C *** BVE IS A BAROTROPIC SPECTRAL MODEL PROGRAMMED BY J. TRIBBIA, NCAR
      PARAMETER(IMAX=50,JMAX=40,KMAX=256,MMAX=25,MP=16,IM2=48,NF=3)
C *** NOTE: IF CHANGES ARE MADE IN THE RESOLUTION PARAMETER, ALSO MAKE
C *** CHANGES IN SUBROUTINE LGTST
      DIMENSION AZ(IMAX,JMAX),AR(JMAX,IMAX),P(JMAX,KMAX)
      DIMENSION DP(JMAX,KMAX),NL(MP),WK(IMAX,JMAX)
      DIMENSION GUSW(JMAX),GUSL(JMAX)
      DIMENSION CA(KMAX),PDP(JMAX,MP)
      DIMENSION CZL(IMAX,JMAX),CZM(IMAX,JMAX),DZL(IMAX,JMAX)
      DIMENSION DZM(IMAX,JMAX),FZ(IMAX,JMAX),IFAC(3)
      COMPLEX V(KMAX),PS(KMAX),F(KMAX),AKP(KMAX)
      COMPLEX AP(JMAX,MMAX),CT(IM2),W(IM2*3),DTF
      COMPLEX VM(KMAX),VS(KMAX),BF(KMAX)
      CHARACTER IDAY
      IU=10
      DO 9 K=1,KMAX
      V(K)=(0.,0.)
    9 CONTINUE
      DO 10 M=1,MP
      NL(M)=MP
   10 CONTINUE
C *** FIRST COMPUTE LEGENDRE POLYNOMIAL, GAUSSIAN WEIGHTS, AND LATITUDES
      CALL LGTST(GUSL,GUSW,CA,P,DP)
      CALL FFTIN(NF,IFAC)
      K=0
      DO 19 M=1,MP
      XM2=FLOAT(M-1)
      NLM=NL(M)
      DO 19 N=1,NLM
      K=K+1
      BF(K)=CMPLX(0.,XM2)
   19 CONTINUE
C *** SET INITIAL CONDITION FOR 5 EAST-WEST ROSSBY WAVES, V(82),
C *** ON A CONSTANT WESTERLY FLOW, V(2)
      S=4./84.
C *** NORMALIZE WITH TOTAL NUMBER OF POINTS FOR FFT
      V(2)=CMPLX(S,0.)*FLOAT(IM2)
      V(82)=CMPLX(.1,0.)*FLOAT(IM2)
      PI=4.*ATAN(1.)
      CALL VORPSI(V,PS,CA,KMAX)
      DT=PI/6.
C *** TO MAKE 20-DAY RUN, KTMAX=25*20
      KTMAX=25*1
C *** TO MAKE PLOT EVERY 5 DAYS, KINC=5
      KINC=1
      KPL=25*KINC
      KRS=25
      DTF=CMPLX(.5*DT,0.)
      DO 95 K=1,KMAX
      VM(K)=V(K)
   95 CONTINUE
      DO 96 KT=1,KTMAX
      KR=MOD(KT,KRS)
      CALL JAC(V,PS,F,CZL,DZL,CZM,DZM,FZ,AKP,AP,AR,P,DP,NL,WK,GUSW,
     +IMAX,JMAX,KMAX,MMAX,MP,IM2,CT,NF,IFAC,W)
      DO 99 K=1,KMAX
      VS(K)=V(K)
      V(K)=VM(K)+DTF*(F(K)-BF(K)*PS(K))
   99 CONTINUE
      IF(KR.LT.3) DTF=CMPLX(2.,0.)*DTF
      IF(KR.LT.3) GO TO 97
      DO 98 KK=1,KMAX
      VM(KK)=VS(KK)
   98 CONTINUE
   97 CONTINUE
      KPZ=MOD(KT,KPL)
      CALL VORPSI(V,PS,CA,KMAX)
      IF(KR.NE.0) GO TO 81
      DO 80 KK=1,KMAX
      VM(KK)=V(KK)
   80 CONTINUE
      DTF=CMPLX(.5*DT,0.)
   81 CONTINUE
      IF(KPZ.NE.0) GO TO 96
C
      CALL COFG(V,AZ,AP,AR,P,NL,WK,IMAX,JMAX,KMAX,MMAX,
     +MP,IM2,CT,NF,IFAC,W)
      DAY=(KT/KPL)*KINC
      DO 1010 JJ=1,JMAX
      AZ(IMAX-1,JJ)=AZ(1,JJ)
 1010 AZ(IMAX,JJ)=AZ(2,JJ)
      WRITE(*,2000)
 2000 FORMAT('0','VORTICITY VALUES:')
      CALL PLOT(AZ,IMAX,JMAX,KT,KTMAX,DAY)
C
      CALL COFG(PS,AZ,AP,AR,P,NL,WK,IMAX,JMAX,KMAX,MMAX,
     +MP,IM2,CT,NF,IFAC,W)
      DO 1020 JJ=1,JMAX
      AZ(IMAX-1,JJ)=AZ(1,JJ)
 1020 AZ(IMAX,JJ)=AZ(2,JJ)
      WRITE(*,2001)
 2001 FORMAT('0','STREAMFUNCTION VALUES:')
      CALL PLOT (AZ,IMAX,JMAX,KT,KTMAX,DAY)
C
   96 CONTINUE
   12 CONTINUE
   89 CONTINUE
      WRITE (*,2002)
 2002 FORMAT ('0',' **************  END OF PROGRAM BVE  **************')
      STOP
      END
      SUBROUTINE PLOT (Z,IMAX,JMAX,KT,KTMAX,DAY)
C *** SUBROUTINE TO MAKE TWO-DIMENSIONAL PLOTS OF FIELDS
      DIMENSION Z(IMAX,JMAX)
      DO 1 I1=1,IMAX,10
      I2=I1+9
      WRITE(*,100)KT,KTMAX,DAY,I1,I2
  100 FORMAT(1X,' KT=',I4,'   KTMAX=',I5,'    DAY=',F5.1,
     +'    I1=',I2,'    I2=',I2)
      DO 2 J=1,JMAX
      L=JMAX+1-J
    2 WRITE (*,400) (Z(I,L),I=I1,I2)
    1 CONTINUE
  400 FORMAT(1X,10F6.3)
      RETURN
      END
      SUBROUTINE PSIVOR(PS,V,CA,KMAX)
C *** SUBROUTINE TO COMPUTE LAPLACIAN OF STREAMFUNCTION
      COMPLEX V(KMAX),PS(KMAX)
      DIMENSION CA(KMAX)
      DO 10 K=2,KMAX
      V(K)=PS(K)/CMPLX(CA(K),0.)
   10 CONTINUE
      RETURN
      END
      SUBROUTINE VORPSI(V,PS,CA,KMAX)
C *** SUBROUTINE TO COMPUTE STREAMFUNCTION FROM THE LAPLACIAN
C *** OF STREAMFUNCTION
      COMPLEX V(KMAX),PS(KMAX)
      DIMENSION CA(KMAX)
      DO 10 K=1,KMAX
      PS(K)=CMPLX(CA(K),0.)*V(K)
   10 CONTINUE
      RETURN
      END
      SUBROUTINE DDM(A,AZ,AP,AR,DP,NL,WK,IMAX,JMAX,KMAX,MMAX,
     +MP,IM2,CT,NF,IFAC,W)
C *** SUBROUTINE TO COMPUTE LATITUDE DERIVATIVE
      COMPLEX A(KMAX),AP(JMAX,MMAX),CT(IM2),W(IM2*3)
      DIMENSION AZ(IMAX,JMAX),DP(JMAX,KMAX),NL(MP)
      DIMENSION WK(IMAX,JMAX),AR(JMAX,IMAX),IFAC(NF)
      DO 10 M=1,MMAX
      DO 10 J=1,JMAX
      AP(J,M)=CMPLX(0.,0.)
   10 CONTINUE
      K=0
      DO 20 M=1,MP
      NLM=NL(M)
      DO 20 N=1,NLM
      K=K+1
      DO 20 J=1,JMAX
      AP(J,M)=AP(J,M)+A(K)*CMPLX(DP(J,K),0.)
   20 CONTINUE
      DO 30 J=1,JMAX
      DO 24 I=1,IM2
      CT(I)=CMPLX(0.,0.)
   24 CONTINUE
      DO 25 I=1,MP
      CT(I)=AP(J,I)/FLOAT(IM2)
   25 CONTINUE
      CALL SFFT(1,IM2,NF,IFAC,CT,W)
      DO 26 I=1,IM2
      AZ(I,J)=REAL(CT(I))
   26 CONTINUE
   30 CONTINUE
      RETURN
      END
      SUBROUTINE GCOF(AZ,A,AP,AR,P,NL,WK,IMAX,JMAX,KMAX,MMAX,
     +MP,IM2,CT,NF,IFAC,W,GUSW)
C *** SUBROUTINE TO TRANSFORM GRIDPOINT VALUES TO SPECTRAL VALUES
      COMPLEX A(KMAX),AP(JMAX,MMAX),CT(IM2),W(IM2*3)
      DIMENSION AZ(IMAX,JMAX),AR(JMAX,IMAX),P(JMAX,KMAX)
      DIMENSION NL(MP),WK(IMAX,JMAX),GUSW(JMAX)
      DIMENSION IFAC(NF)
      DO 10 J=1,JMAX
      DO 15 I=1,IM2
      CT(I)=CMPLX(AZ(I,J),0.0)
   15 CONTINUE
      CALL SFFT(-1,IM2,NF,IFAC,CT,W)
      DO 16 M=1,MP
      AP(J,M)=CT(M)
   16 CONTINUE
   10 CONTINUE
      DO 26 K=1,KMAX
      A(K)=CMPLX(0.,0.)
   26 CONTINUE
      K=0
      DO 20 M=1,MP
      NLM=NL(M)
      DO 20 N=1,NLM
      K=K+1
      DO 20 J=1,JMAX
      A(K)=A(K)+AP(J,M)*CMPLX(P(J,K)*GUSW(J),0.)
   20 CONTINUE
      RETURN
      END
      SUBROUTINE DDL(A,AZ,AKP,AP,AR,P,NL,WK,IMAX,JMAX,KMAX,M
     +MAX,MP,IM2,CT,NF,IFAC,W)
C *** SUBROUTINE TO COMPUTE THE LONGITUDE DERIVATIVE
      COMPLEX AP(JMAX,MMAX),CT(IM2),W(IM2*3)
      COMPLEX A(KMAX),XIM,AKP(KMAX)
      DIMENSION AZ(IMAX,JMAX),NL(MP),P(JMAX,KMAX)
      DIMENSION WK(IMAX,JMAX),AR(JMAX,IMAX),IFAC(NF)
      K=0
      DO 10 M=1,MP
      XM=FLOAT(M-1)
      XIM=CMPLX(0.,XM)
      NLM=NL(M)
      DO 10 N=1,NLM
      K=K+1
      AKP(K)=XIM*A(K)
   10 CONTINUE
      CALL COFG(AKP,AZ,AP,AR,P,NL,WK,IMAX,JMAX,KMAX,MMAX,
     +MP,IM2,CT,NF,IFAC,W)
      RETURN
      END
      SUBROUTINE COFG(A,AZ,AP,AR,P,NL,WK,IMAX,JMAX,KMAX,MMAX,
     +MP,IM2,CT,NF,IFAC,W)
C *** SUBROUTINE TO TRANSFORM SPECTRAL VALUES TO GRIDPOINT VALUES
      COMPLEX A(KMAX),AP(JMAX,MMAX),CT(IM2),W(IM2*3)
      DIMENSION AZ(IMAX,JMAX),P(JMAX,KMAX),NL(MP)
      DIMENSION WK(IMAX,JMAX),AR(JMAX,IMAX),IFAC(NF)
      DO 10 M=1,MMAX
      DO 10 J=1,JMAX
      AP(J,M)=CMPLX(0.,0.)
   10 CONTINUE
      K=0
      DO 20 M=1,MP
      NLM=NL(M)
      DO 20 N=1,NLM
      K=K+1
      DO 20 J=1,JMAX
      AP(J,M)=AP(J,M)+A(K)*CMPLX(P(J,K),0.)
   20 CONTINUE
      DO 30 J=1,JMAX
      DO 24 I=1,IM2
   24 CT(I)=CMPLX(0.,0.)
      DO 25 I=1,MP
      CT(I)=AP(J,I)/FLOAT(IM2)
   25 CONTINUE
      CALL SFFT(1,IM2,NF,IFAC,CT,W)
      DO 26 I=1,IM2
      AZ(I,J)=REAL(CT(I))
   26 CONTINUE
   30 CONTINUE
      RETURN
      END
      SUBROUTINE JAC(C,D,F,CZL,DZL,CZM,DZM,FZ,AKP,AP,AR,P,DP,NL,WK,GUSW,
     +IMAX,JMAX,KMAX,MMAX,MP,IM2,CT,NF,IFAC,W)
C *** SUBROUTINE TO COMPUTE THE JACOBIAN TERM
      COMPLEX C(KMAX),D(KMAX),F(KMAX),CT(IM2),W(IM2*3)
      DIMENSION CZL(IMAX,JMAX),CZM(IMAX,JMAX),DZL(IMAX,JMAX),DZM(IMAX,JM
     +AX),FZ(IMAX,JMAX)
      COMPLEX AP(JMAX,MMAX),AKP(KMAX)
      DIMENSION AR(JMAX,IMAX),P(JMAX,KMAX),DP(JMAX,KMAX),NL(MP)
      DIMENSION WK(IMAX,JMAX),GUSW(JMAX),IFAC(NF)
      CALL DDM(C,CZM,AP,AR,DP,NL,WK,IMAX,JMAX,KMAX,MMAX,
     +MP,IM2,CT,NF,IFAC,W)
      CALL DDM(D,DZM,AP,AR,DP,NL,WK,IMAX,JMAX,KMAX,MMAX,
     +MP,IM2,CT,NF,IFAC,W)
      CALL DDL(C,CZL,AKP,AP,AR,P,NL,WK,IMAX,JMAX,KMAX,M
     +MAX,MP,IM2,CT,NF,IFAC,W)
      CALL DDL(D,DZL,AKP,AP,AR,P,NL,WK,IMAX,JMAX,KMAX,M
     +MAX,MP,IM2,CT,NF,IFAC,W)
      DO 10 J=1,JMAX
      DO 10 I=1,IM2
      FZ(I,J)=CZL(I,J)*DZM(I,J)-CZM(I,J)*DZL(I,J)
   10 CONTINUE
      CALL GCOF(FZ,F,AP,AR,P,NL,WK,IMAX,JMAX,KMAX,MMAX,
     +MP,IM2,CT,NF,IFAC,W,GUSW)
      RETURN
      END
      SUBROUTINE LGTST(GLATS,GWTS,CA,P,DP)
C *** SUBROUTINE TO COMPUTE GAUSSIAN LATITUDES, WEIGHTS AND
C *** LEGENDRE POLYNOMIALS, AND THE DERIVATIVE LEGENDRE POLYNOMIALS
      PARAMETER(MMAX=16,NMAX=16,JMAX=40)
      DIMENSION GWTS(JMAX),GLATS(JMAX),P(JMAX,NMAX,MMAX),P1(JMAX,NMAX)
      DIMENSION P2(JMAX,NMAX),P3(JMAX,NMAX),COA(JMAX),SIA(JMAX)
      DIMENSION DP(JMAX,NMAX,MMAX)
      DIMENSION NN(NMAX)
      DIMENSION CA(NMAX,MMAX)
      CALL LEGTBL(MMAX,NMAX,JMAX,GWTS,GLATS,P,P1,P2,P3,COA,SIA)
      CALL DYDMU(MMAX,JMAX,NMAX,P,DP,COA,SIA)
      DO 15 M=1,MMAX
      MT=M
      DO 15 N=1,NMAX
      XC=FLOAT(MT+N-2)*FLOAT(MT+N-1)
      IF(XC.LE.0.00001) XC=1.E10
      CA(N,M)=-1./XC
   15 CONTINUE
C *** NMAX,MMAX = RHOMBOIDAL TRUNCATION (E.G., R15+1)
C *** FOR ALIAS-FREE LATITUDE/LONGITUDE GRID, JMAX=40
C *** GWTS IS GAUSSIAN WEIGHTS AND GLATS IS GAUSSIAN LATITUDES
C *** P IS LEGENDRE POLYNOMIALS
C *** DP IS DIFFERENTIATED LEGENDRE POLYNOMIALS
      WRITE(*,401)
      WRITE(*,402)GLATS
  401 FORMAT(1X,'GAUSSIAN LATITUDES')
  402 FORMAT(1X,5E15.8)
      WRITE(*,403)
      WRITE(*,402)GWTS
  403 FORMAT(1X,'GAUSSIAN WEIGHTS')
      RETURN
      END
      SUBROUTINE LEGTBL(MMAX,NMAX,JMAX,GWTS,GLATS,P,P1,P2,P3,COA,SIA)
C *** SUBROUTINE TO COMPUTE GAUSSIAN LATITUDES
      DIMENSION GWTS(JMAX),GLATS(JMAX),P(JMAX,NMAX,MMAX),P1(JMAX,NMAX)
      DIMENSION P2(JMAX,NMAX),P3(JMAX,NMAX),COA(JMAX),SIA(JMAX)
      CALL GAUSL1(JMAX,-1.,1.,1,GWTS,GLATS,IER)
      DO 1 J=1,JMAX
      COA(J)=GLATS(J)
      SIA(J)=SQRT(1.-COA(J)*COA(J))
    1 CONTINUE
      MC=MMAX/3+1
      DO 10 M=1,MC
      MP=3*M-1
      MT=MP
      IF(MP-1.GT.MMAX) GO TO 10
      CALL LGNDR(JMAX,MT,NMAX,P1,P2,P3,COA,SIA)
      DO 5 N=1,NMAX
      DO 5 J=1,JMAX
      P(J,N,MP-1)=P1(J,N)
      IF(MP.GT.MMAX) GO TO 8
      P(J,N,MP)=P2(J,N)
      IF(MP+1.GT.MMAX) GO TO 8
      P(J,N,MP+1)=P3(J,N)
    8 CONTINUE
    5 CONTINUE
   10 CONTINUE
      RETURN
      END
      SUBROUTINE LGNDR(LATS,MMAX,NMAX,PNM1,PNM2,PNM3,COA,SIA)
C *** THIS SUBROUTINE IS BASED ON BELOUSOV'S
C *** "TABLES OF NORMALIZED ASSOCIATED LEGENDRE POLYNOMIALS,"
C *** MATHEMATICAL TABLES SER.,VOL.18,PERGAMON PRESS,N.Y.,1962,379PP.
C *** THE PROGRAM USES VARIOUS RECURRENCE FORMULAE TO CALCULATE
C *** NORMALIZED ASSOCIATED LEGENDRE POLYNOMIALS EVALUATED AT THE
C *** COSINES OF A SET OF SPECIFIED CO-LATITUDES FOR A GIVEN RANGE
C *** OF M AND (N-M)
C *** PARAMETER DEFINITIONS:
C *** LATS: NUMBER OF CO-LATITUDES
C *** MMAX: MAXIMUM DESIRED M-VALUE
C *** NMAX: NUMBER OF COMPONENTS IN N-DIRECTION,
C ***	    FROM (N-M)=0 TO (N-M)=NMAX-1
C *** PNM1, PNM2, AND PNM3 (LATS,NMAX) ARE MATRICES CONTAINING VALUES AT
C ***	    ALL CO-LATITUDES, WITH (N-M) RANGING FROM 0 TO (NMAX-1) FOR
C ***	    MMAX-2, MMAX-1, AND M=MMAX, RESPECTIVELY
C
C *** NOTES:
C *** IN THE GENERAL CASE, THE ROUTINE FIRST CALCULATES ALL NMAX*LATS
C *** COMPONENTS FOR M=0 AND M=1.  THEN USING RECURRENCE FORMULAE WHICH
C *** REQUIRE THE PREVIOUS TWO SETS OF M AND (N-M) VALUES FOR A GIVEN M,
C *** THE ROUTINE STARTS AT M=2 AND KEEPS APPLYING THE RECURRENCE
C *** FORMULAE UNTIL IT GETS TO THE DESIRED VALUE OF M(MMAX).  THE
C *** ROUTINE "REMEMBERS" WHAT THE VALUES OF "LATS,MMAX,AND NMAX" WERE IN
C *** THE PREVIOUS CALL.  IF ON THE NEXT CALL "NMAX" IS .LE. ITS OLD
C *** VALUE AND "MMAX" IS .GE. ITS OLD VALUE, AND IF "LATS" IS UNCHANGED,
C *** THE RECURRENCE FORMULAE ARE RESTARTED AT THAT POINT RATHER THAN FROM
C *** THE BEGINNING.  THE VALUES IN PNM1,PNM2, AND PNM3 THEN ARE ASSUMED
C *** TO BE ~rTHE SAME AS THEY WERE AT THE LAST RETURN TO THE CALLING PROGRAM.
C
C *** MMAX MUST BE .GE. 2
C *** NMAX MUST BE .GE. 1
C *** LATS MUST BE .GE. 2
C *** IF "LATS" IS TO BE .GT. 31, SOME REDIMENSIONING MUST BE DONE
C
C *** FOR FASTEST RESULTS, CALLS TO LGNDRE SHOULD BE ARRANGED SO
C *** THAT NMAX(NEW) IS .LE. NMAX(OLD) AND MMAX IS AT LEAST 3 GREATER
C *** THAN IT WAS IN THE PREVIOUS CALL; OTHERWISE, THE RECURRENCE
C *** FORMULAE MUST BE REINITIALIZED.
C
      DIMENSION PNM1(LATS,NMAX),PNM2(LATS,NMAX),PNM3(LATS,NMAX)
      DIMENSION COA(LATS),SIA(LATS)
      DATA ILAT/-1/
C *** CHECK FOR ILLEGAL VALUES OF LATS,MMAX,!NMAX
      IF (LATS.LT.2.OR.MMAX.LT.2.OR.NMAX.LT.1) STOP
      IF (LATS.EQ.ILAT) GO TO 1
C *** INITIALIZE COA ! SIA
      ILAT=LATS
      PI=4.*ATAN(1.)
      ILAT1=ILAT-1
      DELTA=PI/(2.*ILAT1)
    2 CONTINUE
      SQ=2.
      SQR2=SQRT(SQ)
      GO TO 222
C *** CHECK TO SEE IF THE RECURRENCE FORMULAE MUST BE INITIALIZED
C *** UPON ENTRY:
C *** (NM+1)=LAST VALUE OF NMAX
C *** MM    =LAST VALUE OF MMAX
C *** MMIN  =MM+1
C *** ILAT  =LAST VALUE OF LATS (ILAT=-1 INITIALLY, SO THE BRANCH TO
C *** STATEMENT #1 WILL NEVER BE TAKEN THE FIRST TIME, AND HENCE, NM,MM,
C *** AND MMIN WILL BE INITIALIZED CORRECTLY THE FIRST TIME THROUGH.)
    1 IF (NMAX.GT.NM+1) GO TO 222
      IF (MMAX.GT.MM) GO TO 3
C *** THIS BRANCH (PREVIOUS STATEMENT) ASSUMES PNM1,PNM2,AND PNM3
C *** ARE THE SAME AS THEY WERE AT THE LAST RETURN FROM LGNDRE.
C *** CHECK TO SEE IF THIS CASE HAS JUST BEEN DONE;IF SO, RETURN.
      IF (MMAX.EQ.MM) RETURN
C *** START FROM THE BEGINNING
  222 MMIN=2
      NM=NMAX-1
C *** CALCULATE VALUES FOR M=0 AND M=1
      DO 22 I=1,ILAT
      THETA=ACOS(COA(I))
      C1=SQR2
      PNM2(I,1)=1./C1
      DO 20 N=1,NMAX
      FN=N
      FN2=2.*FN
      FN2SQ=FN2*FN2
C *** BELOUSOV EQUATION 19
      C1=C1*SQRT(1.-1./FN2SQ)
C *** BELOUSOV EQUATION 21
      C3=C1/SQRT(FN*(FN+1.))
      ANG=FN*THETA
      S1=0.
      S2=0.
      C4=1.
      C5=FN
      A=-1.
      B=0.
      N1=N+1
      DO 27 KK=1,N1,2
      K=KK-1
      IF(K.EQ.N) C4=.5*C4
      S2=S2+C5*SIN(ANG)*C4
      S1=S1+C4*COS(ANG)
      A=A+2.
      B=B+1.
      FK=K
      ANG=THETA*(FN-FK-2.)
      C4=(A*(FN-B+1.)/(B*(FN2-A)))*C4
      C5=C5-2.
   27 CONTINUE
      IF(N-NMAX) 23,24,20
   23 PNM2(I,N1)=S1*C1
   24 IF(MMAX) 20,20,21
   21 PNM3(I,N)=S2*C3
   20 CONTINUE
   22 CONTINUE
C *** DO-LOOP 22 HAS SET UP LEGENDRE POLYNOMIALS FOR M=0 AND M=1
    3 MM=MMAX
C *** NOW LOOP THROUGH THE RECURRENCE FORMULAE INCREASING "M" UNTIL
C *** IT REACHES THE DESIRED VALUE
      DO 4 M=MMIN,MM
C *** THE EXISTING VALUES MUST BE MOVED OVER FOR THE RECURRENCE
      DO 41 I=1,ILAT
      DO 41 N=1,NMAX
      PNM1(I,N)=PNM2(I,N)
   41 PNM2(I,N)=PNM3(I,N)
      FM=M
      FM1=FM-1.
      FM2=FM-2.
      FM3=FM-3.
      MM1=M-1
      C6=SQRT((2.*FM+1.)/(2.*FM))
  333 DO 39 I=1,ILAT
C *** BELOUSOV EQUATION 23
      PNM3(I,1)=C6*SIA(I)*PNM2(I,1)
      M1=M+1
      IF (NMAX.EQ.1) GO TO 39
      DO 40 N=2,NMAX
      FN=N+MM1
      NM1=N-1
      NM2=N-2
      NN1=N+1
      C7=(FN*2.+1.)/(FN*2.-1.)
      C8=(FM1+FN)/((FM+FN)*(FM2+FN))
      C=SQRT((FN*2.+1.)/(FN*2.-3.)*C8*(FM3+FN))
      D=SQRT(C7*C8*(FN-FM1))
      E=SQRT(C7*(FN-FM)/(FN+FM))
      IF(N-NMAX) 43,42,40
C *** BELOUSOV EQUATION 17
   43 PNM3(I,N)=C*PNM1(I,N)-D*PNM1(I,NN1)*COA(I)+E*PNM3(I,NM1)*COA(I)
      GO TO 40
C *** BELOUSOV EQUATION 11
   42 A=SQRT((FN*FN-.25)/(FN*FN-FM*FM))
      B=SQRT((2.*FN+1.)*(FN-FM-1.)*(FN+FM1)/((2.*FN-3.)*(FN-FM)*(FN+FM))
     +)
C *** BELOUSOV EQUATION 11 FOR ONE MISSING VALUE
      PNM3(I,N)=2.00*A*COA(I)*PNM3(I,NM1)-B*PNM3(I,NM2)
   40 CONTINUE
   39 CONTINUE
    4 CONTINUE
C *** C,D,E ARE BELOUSOV'S C,D,E
C *** PNM1(I,N)=P(N,M-2)(COS I)
C *** PNM2(I,N)=P(N,M-1)(COS I)
C *** PNM3(I,N)=P(N,M)(COS I)
C *** (COS I) IS THE COSINE OF THE ITH CO-LATITUDE
C *** N IS NOW THE MERIDIONAL WAVE NUMBER
C
C *** SET UP FOR POSSIBLE NEW ENTRY
      MMIN=MM+1
      RETURN
      END
      SUBROUTINE DYDMU(MMAX,JMAX,NMAX,P,DP,COA,SIA)
C *** SUBROUTINE TO COMPUTE DERIVATIVE OF LEGENDRE POLYNOMIAL
      DIMENSION P(JMAX,NMAX,MMAX),DP(JMAX,NMAX,MMAX),COA(JMAX),SIA(JMAX)
      LT=NMAX-1
      DO 20 M=1,MMAX
      MM=M-1
      DO 10 L=2,LT
      N=MM+L-1
      DM=DCF(MM,N)*FLOAT(N+1)
      DP1=DCF(MM,N+1)*FLOAT(N)
      DO 10 J=1,JMAX
      DP(J,L,M)=(DM*P(J,L-1,M)-DP1*P(J,L+1,M))/(SIA(J)*SIA(J))
   10 CONTINUE
      NL=MM+NMAX-1
      DO 30 J=1,JMAX
      DP(J,1,M)=-FLOAT(MM)*DCF(MM,MM+1)*P(J,2,M)/(SIA(J)*SIA(J))
      DP(J,NMAX,M)=(FLOAT(2*NL+1)*DCF(MM,NL)*P(J,NMAX-1,M)-FLOAT(NL)*COA
     +(J)*P(J,NMAX,M))/(SIA(J)*SIA(J))
   30 CONTINUE
   20 CONTINUE
      RETURN
      END
      FUNCTION DCF(M,N)
      X=FLOAT(M)
      Y=FLOAT(N)
      DCF=SQRT((Y*Y-X*X)/(4.*Y*Y-1.))
      RETURN
      END
      SUBROUTINE GAUSL1 (N,A,B,NSUB,CK,XK,IER)
C *** SUBROUTINE TO CALCULATE GAUSS-LEGENDRE WEIGHTS AND ABSCISSAE OF A
C *** GIVEN ORDER ON A GIVEN INTERVAL, OR TO COMPUTE THE INTEGRAL OF A
C *** FUNCTION ON A GIVEN INTERVAL USING GAUSS-LEGENDRE QUADRATURE
C *** FORMULAE.  (FOR OTHER GAUSSIAN QUADRATURE FORMULAE, USE THE NSSL
C *** PACKAGE, GAUSS.)
C *** GAUSS-LEGENDRE QUADRATURE CORRESPONDS TO A WEIGHT FUNCTION OF 1 ON
C *** A FINITE INTERVAL.  IT INVOLVES APPROXIMATING THE INTEGRAL OF A
C *** FUNCTION BY A SUM OF FUNCTIONAL VALUES MULTIPLIED BY APPROPRIATE
C *** WEIGHTS.	WITH N ABSCISSAE AND WEIGHTS, THE APPROXIMATION IS EXACT
C *** FOR ALL POLYNOMIALS OF DEGREE LESS THAN 2*N.  THIS IS THE HIGHEST
C *** PRECISION THAT CAN BE OBTAINED USING N POINTS.  GAUSS-LEGENDRE
C *** QUADRATURE FORMULAE HAVE THE ADDITIONAL FEATURE OF NOT USING THE
C *** FUNCTIONAL VALUES AT THE ENDPOINTS OF THE INTERVAL OF INTEGRATION.
C ***
C *** SUBROUTINE GAUSL1 - COMPUTES THE WEIGHTS AND ABSCISSAE
C *** FUNCTION GAUSL2	- CALCULATES THE GAUSS-LEGENDRE APPROXIMATION
C *** TO THE INTEGRAL OF A GIVEN FUNCTION USING WEIGHTS AND ABSCISSAE
C *** PRODUCED BY GAUSL1.  PROGRAMMED BY RUSSELL K. REW, NCAR, FROM A
C *** METHOD DESCRIBED IN "THE HANDBOOK OF MATHEMATICAL FUNCTIONS" BY
C *** M. ABRAMOWITZ AND I. STEGUN
C ----------------------------------------------------------------------
C *** SUBROUTINE GAUSL1 (N,A,B,NSUB,CK,XK,IER)
C *** DIMENSION OF   CK(N*NSUB),XK(N*NSUB)
C *** USAGE	     CALL GAUSL1 (N,A,B,NSUB,CK,XK,IER)
C *** ARGUMENTS:
C *** ON INPUT	     N - ORDER OF QUADRATURE DESIRED ON EACH ORDER
C ***			 SUBINTERVAL.  N MUST BE A POSITIVE INTEGER.
C ***		     A - LEFT ENDPOINT OF INTEGRATION INTERVAL
C ***		     B - RIGHT ENDPOINT OF INTEGRATION INTERVAL
C ***		  NSUB - NUMBER OF SUBINTERVALS INTO WHICH THE INTEGRA-
C ***			 TION INTERVAL IS TO BE SUBDIVIDED, WITH AN N
C ***			 POINT QUADRATURE RULE APPLIED TO EACH.  IF NSUB
C ***			 IS 1, THE N POINT QUADRATURE RULE IS CALCULATED
C ***			 FOR THE WHOLE INTERVAL (A,B)
C *** ON OUTPUT     CK - THE N*NSUB WEIGHTS RETURNED BY GAUSL1
C ***		    XK - THE CORRESPONDING N*NSUB ABSCISSAE.  AN APPROX-
C ***			 IMATION TO THE INTEGRAL OF F(X) FROM A TO B IS
C ***			 GIVEN BY:
C ***			     CK(1)*F(XK(1)) + CK(2)*F(XK(2))
C ***			     + ... + CK(N*NSUB)*F(XK(N*NSUB))
C ***		   IER = 0  IF NO ERRORS OCCURRED
C ***		       = 1  IF GAUSL1 WAS CALLED WITH N OR NSUB .LE. 0
C ***			    (IF IER .NE. 0, A MESSAGE IS PRINTED)
C ***
      DIMENSION       CK(1)	 ,XK(1)
C ***
C *** TEST FOR INVALID INPUT
      IF (N.LE.0 .OR. NSUB.LE.0) GO TO 103
      IER = 0
      DINT = (B-A)/FLOAT(NSUB)
      B1 = A+DINT
C *** GET WEIGHTS AND ABSCISSAE FOR FIRST SUBINTERVAL
      CALL GAUSL3 (N,A,B1,CK,XK)
      IF (NSUB .EQ. 1) GO TO 104
      NSUBM1 = NSUB-1
C *** GET WEIGHTS AND ABSCISSAE FOR REST OF SUBINTERVALS
      DO 102 ISUB=1,NSUBM1
	 DISP = DINT*FLOAT(ISUB)
	 NISUB = N*ISUB
	 DO 101 J=1,N
	    K = J+NISUB
	    CK(K) = CK(J)
	    XK(K) = XK(J)+DISP
  101	 CONTINUE
  102 CONTINUE
      GO TO 104
  103 IER = 1
C *** ADD ERROR MESSAGE PRINT
      WRITE (*,174)
  174 FORMAT (1X,'ARGUMENTS IN GAULS1 ARE INCORRECT')
  104 RETURN
      END
      FUNCTION GAUSL2 (N,A,B,NSUB,F,WRK,IER)
C *** FUNCTION GAUSL2 (N,A,B,NSUB,F,WRK,IER)
C *** DIMENSION OF   WRK(2*N)
C *** USAGE	     FINT = GAUSL2 (N,A,B,NSUB,F,WRK,IER)
C *** ARGUMENTS:
C *** ON INPUT	     N - ORDER OF QUADRATURE DESIRED ON EACH SUBINTER-
C ***			 VAL.  N MUST BE A POSITIVE INTEGER.
C ***		     A - LEFT ENDPOINT OF INTEGRATION INTERVAL
C ***		     B - RIGHT ENDPOINT OF INTEGRATION INTERVAL
C ***		  NSUB - NUMBER OF SUBINTERVALS INTO WHICH THE INTEGRA-
C ***			 TION INTERVAL IS TO BE SUBDIVIDED, WITH AN N
C ***			 POINT QUADRATURE RULE APPLIED TO EACH.  IF NSUB
C ***			 IS 1, THE N POINT QUADRATURE RULE IS CALCULATED
C ***			 FOR THE WHOLE INTERVAL (A,B)
C ***		     F - THE NAME OF THE USER-SUPPLIED INTEGRAND,
C ***			 WRITTEN AS A FUNCTION OF ONE VARIABLE AND
C ***			 DECLARED EXTERNAL IN THE CALLING ROUTINE
C ***		   WRK - A WORK ARRAY WHICH MUST BE DIMENSIONED FOR AT
C ***			 LEAST 2*N
C *** ON OUTPUT    IER = 0 IF NO ERRORS OCCURRED
C ***		       = 1 IF GAUSL2 WAS CALLED WITH N OR NSUB .LE.0.
C ***			 (IF IER .NE. 0, A MESSAGE IS PRINTED BY THE
C ***			 INDICATING ERROR)
C ***		GAUSL2 - THE FUNCTION NAME CONTAINS THE VALUE OF THE
C ***			 INTEGRAL, CALCULATED AS THE SUM (FOR I=1 TO
C ***			 N*NSUB) OF CK(I)*F(XK(I)) WHERE THE FIRST N
C ***			 ELEMENTS OF THE CK AND XK ARRAYS ARE OBTAINED
C ***			 BY CALLING GAUSL1 AND ARE STORED IN THE WORK
C ***			 ARRAY, WRK.  FOR NSUB .GT.1, THE REST OF THE
C ***			 WEIGHTS AND ABSCISSAE ARE OBTAINED FROM THE
C ***			 FIRST N.
C ***
      DIMENSION       WRK(1)
      GAUSL2 = 0.
C
C *** TEST FOR INVALID INPUT
      IF (N.LE.0 .OR. NSUB.LE.0) GO TO 103
      IER = 0
      DINT = (B-A)/FLOAT(NSUB)
      B1 = A+DINT
C *** GET WEIGHTS AND ABSCISSAE FOR FIRST SUBINTERVAL
      CALL GAUSL3 (N,A,B1,WRK(1),WRK(N+1))
      DO 102 ISUB=1,NSUB
	 DISP = DINT*FLOAT(ISUB-1)
C *** ADD CONTRIBUTION TO INTEGRAL OF THE ISUB SUBINTERVAL
	 DO 101 J=1,N
	    JPN = J+N
	    GAUSL2 = GAUSL2+WRK(J)*F(WRK(JPN)+DISP)
  101	 CONTINUE
  102 CONTINUE
      GO TO 104
  103 IER = 1
C *** WRITE ERROR MESSAGE
      WRITE (*,175)
  175 FORMAT (1X,'ARGUMENTS IN GAUSL2 ARE INCORRECT')
  104 RETURN
      END
      SUBROUTINE GAUSL3 (N,XA,XB,WT,AB)
C *** WEIGHTS AND ABSCISSAE FOR NTH ORDER GAUSSIAN QUADRATURE ON
C *** (XA,XB)
C *** ARGUMENTS:
C *** ON INPUT	     N - THE ORDER DESIRED
C ***		    XA - LEFT ENDPOINT OF THE INTERVAL OF INTEGRATION
C ***		    XB - RIGHT ENDPOINT OF THE INTERVAL OF INTEGRATION
C *** ON OUTPUT     AB - N CALCULATED ABSCISSAE
C ***		    WT - N CALCULATED WEIGHTS
C ***
      DOUBLE PRECISION		  DZERO      ,DZERI	 ,DP	     ,
     1		      DPM1	 ,DPM2	     ,DPPR	 ,DP2PRI     ,
     2		      DRAT	 ,DPROD      ,DTMP	 ,DDIF	     ,
     3		      DSUM	 ,DDIFX
      DIMENSION       AB(N)	 ,WT(N)
C ***
C *** MACHINE DEPENDENT CONSTANTS:
C *** TOL - CONVERGENCE CRITERION FOR DOUBLE PRECISION ITERATION
C *** PI  - GIVEN TO 15 SIGNIFICANT DIGITS
C *** C1  -  1/8		     THESE ARE COEFFICIENTS IN MCMAHON'S
C *** C2  -  -31/(2*3*8**2)	     EXPANSIONS OF THE KTH ZERO OF THE
C *** C3  -  3779/(2*3*5*8**3)	     BESSEL FUNCTION J0(X) (CF.
C *** C4  -  -6277237/(3*5*7*8**5)   ABRAMOWITZ, HANDBOOK OF MATHEMATI-
C *** U   -  (1-(2/PI)**2)/4	     CAL FUNCTIONS)
C ***
      DATA TOL/1.E-22/,PI/3.14159265358979/,U/.148678816357662/
      DATA C1,C2,C3,C4/.125,-.080729166666667,.246028645833333,
     1		       -1.82443876720609 /
C *** MAXIMUM NUMBER OF ITERATIONS BEFORE GIVING UP ON CONVERGENCE
      DATA MAXIT /5/
C *** ARITHMETIC STATEMENT FUNCTION FOR CONVERTING INTEGER TO DOUBLE
C *** PRECISION
      DBLI(INTEGR) = DBLE(FLOAT(INTEGR))
      DDIF = .5D0*(DBLE(XB)-DBLE(XA))
      DSUM = .5D0*(DBLE(XB)+DBLE(XA))
      IF (N .GT. 1) GO TO 101
      AB(1) = DSUM
      WT(1) = 2.*DDIF
      GO TO 107
  101 CONTINUE
      NNP1 = N*(N+1)
      COND = 1./SQRT((.5+FLOAT(N))**2+U)
      LIM = N/2
      DO 105 K=1,LIM
	 B = (FLOAT(K)-.25)*PI
	 BISQ = 1./(B*B)
C *** ROOTBF APPROXIMATES THE KTH ZERO OF THE BESSEL FUNCTION J0(X)
	 ROOTBF = B*(1.+BISQ*(C1+BISQ*(C2+BISQ*(C3+BISQ*C4))))
C *** INITIAL GUESS FOR KTH ROOT OF LEGENDRE POLYNOMIAL P-SUB-N(X)
	 DZERO = COS(ROOTBF*COND)
	 DO 103 I=1,MAXIT
	    DPM2 = 1.D0
	    DPM1 = DZERO
C *** RECURSION RELATION FOR LEGENDRE POLYNOMIALS
	    DO 102 NN=2,N
	       DP = (DBLI(2*NN-1)*DZERO*DPM1-DBLI(NN-1)*DPM2)/DBLI(NN)
	       DPM2 = DPM1
	       DPM1 = DP
  102	    CONTINUE
	    DTMP = 1.D0/(1.D0-DZERO*DZERO)
	    DPPR = DBLI(N)*(DPM2-DZERO*DP)*DTMP
	    DP2PRI = (2.D0*DZERO*DPPR-DBLI(NNP1)*DP)*DTMP
	    DRAT = DP/DPPR
C *** CUBICALLY-CONVERGENT ITERATIVE IMPROVEMENT OF ROOT
	    DZERI = DZERO-DRAT*(1.D0+DRAT*DP2PRI/(2.D0*DPPR))
	    IF (ABS(SNGL(DZERI-DZERO)) .LE. TOL) GO TO 104
	    DZERO = DZERI
  103	 CONTINUE
  104	 CONTINUE
	 DDIFX = DDIF*DZERO
	 AB(K) = DSUM-DDIFX
	 WT(K) = 2.D0*(1.D0-DZERO*DZERO)/(DBLI(N)*DPM2)**2*DDIF
	 I = N-K+1
	 AB(I) = DSUM+DDIFX
	 WT(I) = WT(K)
  105 CONTINUE
      IF (MOD(N,2) .EQ. 0) GO TO 107
      AB(LIM+1) = DSUM
      NM1 = N-1
      DPROD = N
      DO 106 K=1,NM1,2
	 DPROD = DBLI(NM1-K)*DPROD/DBLI(N-K)
  106 CONTINUE
      WT(LIM+1) = 2.D0/DPROD**2*DDIF
  107 RETURN
      END
      SUBROUTINE FFTIN(NF,IFAC)
C *** SUBROUTINE SFFT
C *** THE ARRAY IFAC MUST BE INPUT WITH THE PRIME FACTORIZATION OF N,
C *** WHICH IS THE LENGTH OF THE SEQUENCE TO BE TRANSFORMED. E.G.,
C *** FOR N=48, THE ARRAY IFAC SHOULD CONTAIN IFAC(1)=3, IFAC(2)=4,
C *** IFAC(3)=4.  THE FORTRAN PROGRAM WAS WRITTEN BY P. SWARZTRAUBER,
C *** NCAR. (FOR ALGORITHM SEE "PARALLEL COMPUTING",1,(1984),45-63)
      DIMENSION IFAC(NF)
      IFAC(1)=3
      IFAC(2)=4
      IFAC(3)=4
      RETURN
      END
      SUBROUTINE SFFT(IS,N,NF,IFAC,C,CH)
C *** SUBROUTINE TO COMPUTE STOCKHAM FFT BOTH FORWARD AND REVERSE
C *** TRANSFORMS
      DIMENSION IFAC(NF),C(1),CH(1)
      COMMON /PASK/ OMEGA,TAU
      COMPLEX C,CH,OMEGA,TAU
C *** TRANSPOSED STOCKHAM FFT
C *** IS=-1 FOR FORWARD TRANSFORM AND IS=1 FOR BACKWARD TRANSFORM
      TPI = 8.*ATAN(1.)
      L1 = 1
      DO 1 K1=1,NF
      IP = IFAC(K1)
      ARG = FLOAT(IS)*TPI/FLOAT(IP)
      TAU = CMPLX(COS(ARG),SIN(ARG))
      L2 = IP*L1
      IDO = N/L2
      ARG = FLOAT(IS)*TPI/FLOAT(IP*IDO)
      OMEGA = CMPLX(COS(ARG),SIN(ARG))
      CALL PASSG(IDO,IP,L1,C,C,CH)
      L1=L2
    1 CONTINUE
      RETURN
      END
      SUBROUTINE PASSG(IDO,IP,L1,CC,C1,CH)
C *** SUBROUTINE NEEDED FOR TRANSFORM IN SFFT
      DIMENSION CH(IDO,L1,IP),CC(IDO,IP,L1),C1(IDO,L1,IP)
      COMMON /PASK/ OMEGA,TAU
      COMPLEX OMEGA,TAU,CC,C1,CH
C *** GENERAL RADIX STOCKHAM FFT
      DO 2 I=1,IDO
      DO 2 K=1,L1
      DO 2 L=1,IP
      CH(I,K,L)=0.
      DO 2 J=1,IP
      CH(I,K,L)=CH(I,K,L)+TAU**((J-1)*(L-1))*CC(I,J,K)
    2 CONTINUE
      DO 1 J=1,IP
      DO 1 K=1,L1
      DO 1 I=1,IDO
      C1(I,K,J)=OMEGA**((I-1)*(J-1))*CH(I,K,J)
    1 CONTINUE
      RETURN
      END
